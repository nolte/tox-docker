version: 2
aliases:
  # SSH Deployment key for github Pushing,
  - &deploy_ssh_fingerprint "4d:ef:59:3c:a4:28:0d:92:f7:3d:79:9c:b9:e0:56:8f"

  # add the GitHub Deployment Key to the ssh-agent
  # @see https://circleci.com/docs/2.0/add-ssh-key/
  - &run_task_add_key
    add_ssh_keys:
      fingerprints:
        - *deploy_ssh_fingerprint
  - &run_task_add_gh_known_hosts
    run:
      name: Keyscan Github (HACK)
      command: ssh-keyscan -H github.com >> ~/.ssh/known_hosts

  # Configure git user settings
  # @see https://help.github.com/articles/setting-your-username-in-git/
  - &run_task_configure_git
    run:
      name: configure git set global settings
      command: |
        git config --global user.email "$GIT_AUTHOR_EMAIL"
        git config --global user.name "${CIRCLE_USERNAME}"

  # @see https://tox.readthedocs.io/en/latest/install.html
  # Install tox required system dependencies
  - &run_task_install_tox_dependencies
    run:
      name: install tox dependencies
      command: |
        sudo apt-get -qq update
        sudo apt install -y build-essential libssl-dev libpython-dev python python-pip
        virtualenv ${HOME}/venv
        . ${HOME}/venv/bin/activate
        pip install tox

  # Configure git user settings
  # @see https://help.github.com/articles/setting-your-username-in-git/
  - &run_task_configure_git
    run:
      name: configure git set global settings
      command: |
        git config --global user.email "$GIT_AUTHOR_EMAIL"
        git config --global user.name "${CIRCLE_USERNAME}"

  # @see https://circleci.com/docs/2.0/language-python/
  # Used container for python based uilds
  - &container_python
    docker:
      - image: circleci/python:3.6.4

  # @see https://stedolan.github.io/jq/
  # used for better JSon Command Line parsing.
  - &run_task_prepare_jq
    run:
      name: install jq to path
      command: |
        sudo wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /usr/bin/jq
        sudo chmod +x /usr/bin/jq

  # Load the latest GitHub Release
  # Reuqired jq in the path
  # @see https://developer.github.com/v3/repos/releases/#get-the-latest-release
  - &run_task_load_latest_ghrelease
    run:
      name: Load the Latest GH Release
      command: |
        LAST_VERSION="$(curl https://${GITHUB_TOKEN}@api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/latest | jq -r '.tag_name' )"
        echo $LAST_VERSION > /tmp/workspaces/last_release.txt
jobs:
  # generate a changelog from existing github commits/pull requests
  # using https://github.com/ferrarimarco/docker-github-changelog-generator as generate container
  # the container wraps https://github.com/github-changelog-generator/github-changelog-generator
  generate-changelog:
    machine: true
    working_directory: /tmp/workspaces/changelog
    steps:
      - *run_task_prepare_jq
      - *run_task_load_latest_ghrelease
      - run:
          name: generate CHANGELOG.md
          command: |
            LAST_VERSION="$(cat /tmp/workspaces/last_release.txt)"
            docker run -it --rm -v "$(pwd)":/usr/local/src/your-app ferrarimarco/github-changelog-generator:1.15.0.pre.beta --user ${CIRCLE_PROJECT_USERNAME} --project ${CIRCLE_PROJECT_REPONAME} --token ${GITHUB_TOKEN} --since-tag $LAST_VERSION --no-unreleased
      - store_artifacts:
          path: /tmp/workspaces/changelog
      - persist_to_workspace:
          root: /tmp/workspaces/changelog
          paths:
              - CHANGELOG.md

  finializebuild:
    <<: *container_python
    working_directory: /tmp/workspaces/build
    steps:
      - *run_task_configure_git
      - *run_task_add_key
      - *run_task_add_gh_known_hosts
      - attach_workspace:
          at: /tmp/workspaces
      - run:
          name: Push changes to github if release build
          command: |
            if [ -f /tmp/workspaces/release_build.txt ]; then
                echo "File not found!"
                releaseBranch="$(cat /tmp/workspaces/release_build.txt)"
                git push origin release/$releaseBranch
                git push origin ${CIRCLE_BRANCH}
            fi

  check_grade_up_build:
    <<: *container_python
    working_directory: /tmp/workspaces/build
    steps:
      - *run_task_configure_git
      - *run_task_install_tox_dependencies
      - checkout
      - run:
          name: install bumpversion
          command: |
            sudo pip install bumpversion
      - run:
          name: check is release build
          command: |
            GIT_COMMIT_DESC=$(git log --format=%B -n 1 $CIRCLE_SHA1)
            echo $GIT_COMMIT_DESC
            if [[ $GIT_COMMIT_DESC =~ "GradeUP" ]] && [[ $CIRCLE_BRANCH == "develop" ]];
            then
              echo "match"
              currentVersion=$(bumpversion --allow-dirty --dry-run --list release | grep new_version | sed -r s,"^.*=",,)
              bumpversion --commit release
              git checkout -b release/v$currentVersion-pre
              git checkout develop
              bumpversion --commit minor
              echo "v$currentVersion-pre" > /tmp/workspaces/release_build.txt
            else
               echo "classic build"
            fi
      - persist_to_workspace:
          root: /tmp/workspaces
          paths:
              - build/*
              - release_build.txt

  build:
    machine: true
    working_directory: /tmp/workspaces/build
    steps:
      - attach_workspace:
          at: /tmp/workspaces
      - *run_task_install_tox_dependencies
      - run:
          name: install the project
          command: |
            sudo sh -c 'echo "deb http://ppa.launchpad.net/deadsnakes/ppa/ubuntu trusty main" >> /etc/apt/sources.list.d/python.list' && \
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F23C5A6CF475977595C89F51BA6932366A755776 && \
            sudo apt-get update -q && \
            sudo apt-get install -q -y curl git \
                python2.7 python2.7-dev libpython2.7-dev \
                python3.4 python3.4-dev libpython3.4-dev \
                python3.5 python3.5-dev libpython3.5-dev \
                python3.6 python3.6-dev libpython3.6-dev
      - run:
          name: install the project
          command: |
            . ${HOME}/venv/bin/activate
            pip install -e ${CIRCLE_WORKING_DIRECTORY}
      - run:
          name: execute tox
          command: |
            . ${HOME}/venv/bin/activate
            tox
      - store_artifacts:
          path: /tmp/workspaces/build/.tox/dist/
      - persist_to_workspace:
          root: /tmp/workspaces/build/.tox
          paths:
              - dist
              - docs/tmp/html/

workflows:
  version: 2
  build_and_test:
    jobs:
      - check_grade_up_build
      - build:
          requires:
            - check_grade_up_build
      - generate-changelog:
          requires:
            - build
